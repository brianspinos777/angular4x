====================================================================
- reducers: are handlers
    -> reducers must be pure functions (an input should always generate the same output, always)
    -> it deals with a slice of the state
    -> the functions that takes the prev state, an action, and returns a new state


- actions: are functions that use .dispatch in them ???
    -> {type: ADD_TODO, payload: 'wash dishes'}

- container components: smart components that know about redux
- dumb components: 
    -> are presentational components, they are concern with how things look.
    -> they should be highly configurable/reusable
    -> they do NOT dispatch actions


async actions (http requests):
    -> 
====================================================================



# Add a remote:
$ git remote add origin https://github.com/user/repo.git

# display remotes
$ git remote show origin

//==================================================== Links
github.com/designcourse/mean4plus
https://codahale.com/how-to-safely-store-a-password/

//==================================================== Libs
$ npm i -g nodemon
$ npm i nodemailer
$ npm i bcrypt # for hashing passwords
$ npm i node-uuid # for ids

//==================================================== What to implement
@ViewChild
child routes

//==================================================== folders:

- server
    - routes
    - middlewares
- dist
- src
    - routes
    - components
    - constants
    - models
    - guards
    - models
    - pages
    - redux
    - services
    - pages
    - redux 
        - actions
        - reducers
        - constants


//====================================================
$ ng serve --prod --watch # serves the dist folder
$ ng build --prod --watch --sourcemap=false --aot=false # for faster builds on development


//==================================================== TEST
- test user gets proper data
- test user does not get data that does not belong to him
- test things that should NOT happen
- complex calculations in services


//==================================================== git stash

# GIT STASH


# stash some changes
$ git stash save -u "msg"  # the -u keeps untracked files! awesome! (same as --include-untracked)

# now you should have a clean state


# reapply saved stash
git stash apply stash@{0}


# now drop the stash (it is NOT automatically deleted)
$ git stash drop stash@{0}


$ git stash list  # see all entries



# it seems you cant see the untracked files content 
# (but dont worry, you will be able to restore them!)

$ git stash show stash@{0}


#==================================================== THUNK (NOT WORKING YET)

npm i redux-thunk

import thunk from 'redux-thunk';

// add thunk to list of middlewares

getUsers(){
    this.ngRedux.dispatch<any>((dispatch) => {
        dispatch({type: 'GET_USERS_PENDING', payload: 'Getting users...'});

        this.http.get(this.apiUrl + "checkpass")
        .map(res => res.json())
        .subscribe(
            res => {
                dispatch({
                    type: 'GET_USERS_FULFILLED',
                    payload: res
                });
            },
            error =>{
                // console.log(error)
                dispatch({
                    type: 'GET_USERS_REJECTED', 
                    payload: 'Error!'
                });
            }
        )
    });
}


===================================================== CRUD

// Item crud

$ ng g c pages/items/IndexItem
$ ng g c pages/items/ShowItem
$ ng g c pages/items/NewItem
$ ng g c pages/items/EditItem

$ ng g s services/items/Item # remember to pass it to the providers array


index - show list of items                     GET /items  - view
show - show single item                        GET /items/1  - view
new - show form for new item                   GET /items/new  - view
edit - show form for editing existing item     GET /items/1/edit  - view
create - create item                           POST /items
update - update item                           PUT /items/1
destroy - delete item                          DELETE /items/1


-> add endpoint in express

-> create component: 
    page/items/IndexItemComponent - list
    page/items/ShowItemComponent - singe item
    page/items/NewItemComponent - form
    page/items/EditItemComponent - form
