# Typescript

// Each line of instruction is called a statement. Semicolons are optional in TypeScript.


var message:string = "Hello World"  // string type


//--------------------------------------------------------------------- types:

let x1:number = 123;
let x2:string = "aaa";
let x3:void = null;
let x3:void = undefined;
let x4:boolean = true;
let x5:any = 123;
let x6:null = null;
let x7:undefined = undefined;
let x8:Array<number> = [1,2,3]
let x9:object  = {foo:1, bar:2}

//---------------------------------------------------------------------

// function return type

class Greeting { 
   greet():number { 
      return 123
   } 
} 



//---------------------------------------------------------------------

// function parameter type

class Person { 
    getWeight<T>(weight:T) { 
        return weight;
    }
}

let brian = new Person();
let x = 123.45
brian.getWeight<number>(x); // expect x as a number
//---------------------------------------------------------------------

// type casting?

let x = <number>'123';
//---------------------------------------------------------------------



class Person { 
    static population = 1000000
}

Person.population // 1000000

//---------------------------------------------------------------------

// Array Destructuring

var arr:number[] = [12,13] 
var[x,y] = arr 
console.log(x) 
console.log(y)
//---------------------------------------------------------------------

var mytuple = [10,"Hello"];
//---------------------------------------------------------------------

//union

let x1:number | string = "abc"
let x2:number | string = 123
//---------------------------------------------------------------------

// interface

interface IPerson { 
   firstName:string, 
   lastName:string, 
   sayHi: ()=>string 
} 

var customer:IPerson = { 
   firstName:"Tom",
   lastName:"Hanks", 
   sayHi: ():string =>{return "Hi there"} 
} 

//----------------------------------------
interface Shape {
    name: string;
    width: number;
    height: number;
    color?: string;
}
 
function area(shape : Shape) {
    var area = shape.width * shape.height;
    return "I'm " + shape.name + " with area " + area + " cm squared";
}
 
console.log( area( {name: "rectangle", width: 30, height: 15} ) );
console.log( area( {name: "square", width: 30, height: 30, color: "blue"} ) );


//---------------------------------------------------------------------

//class 

class Car { 
   engine:string; 
 
   constructor(engine:string) { 
      this.engine = engine 
   }  

   disp():void { 
      console.log("Engine is  :   "+this.engine) 
   } 
}

//---------------------------------------------------------------------

// Inheritance 

class Shape { 
   Area:number 
   
   constructor(a:number) { 
      this.Area = a 
   } 
} 

class Circle extends Shape { 
   disp():void { 
      console.log("Area of the circle:  "+this.Area) 
   } 
}
  
var obj = new Circle(123); 
obj.disp()

//---------------------------------------------------------------------

// static 

class StaticMem {  
   static num:number; 
   
   static disp():void { 
      console.log("The value of num is"+ StaticMem.num) 
   } 
} 

StaticMem.num = 12     // initialize the static variable 
StaticMem.disp()      // invoke the static method
//---------------------------------------------------------------------

// interfaces and classes

interface ILoan { 
   interest:number 
} 

class AgriLoan implements ILoan { 
   interest:number 
   rebate:number 
   
   constructor(interest:number,rebate:number) { 
      this.interest = interest 
      this.rebate = rebate 
   } 
} 

var obj = new AgriLoan(10,1) 
console.log("Interest is : "+obj.interest+" Rebate is : "+obj.rebate )

//---------------------------------------------------------------------

// namespace

namespace MyNamespace { 
    class Person { 
        draw() { return 1}; 
   }
} 
//---------------------------------------------------------------------
//Type Assertion or casting.

//These are the same:

let square = <Square>{};
let square = {} as Square;

var foo: any = '123';
var bar = <string> foo; // bar is now of type "string"

//---------------------------------------------------------------------

let copy = { ...original };
let merged = { ...foo, ...bar, ...baz };
//--------------------------------------------------------------------- generics

class Greeter<T> {
    greeting: T;
    constructor(message: T) {
        this.greeting = message;
    }
    greet() {
        return this.greeting;
    }
}

let greeter = new Greeter<string>("Hello, world");

greeter.greet();

//--------------------------------------------------------------------- interpolation

let user = "Brian"
let msg = `Hello ${user}`


//---------------------------------------------------------------------


//---------------------------------------------------------------------


//---------------------------------------------------------------------


//---------------------------------------------------------------------


//---------------------------------------------------------------------


//---------------------------------------------------------------------


//---------------------------------------------------------------------


//---------------------------------------------------------------------

