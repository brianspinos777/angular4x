================================ TODO:
- delete items
- complete the forms
- Guard subfolders
- custom pipes
- ng-template
- add api version: /api/v1/items
- jwt
- add form validation
- add state to localStorage
- use an ORM
- create models for data // as services?
- data associations
- use redis for caching
- add CRUD forms
- add return types to functions, and arguments
- create a filter
- add alerts to give users feedback
- ngClass
- ngStyle
- custom directives // example of use case: massaging input on form
- ElementRef
- ngModelGroup // to combine fields into a nested object within the form?
- ngForm // example: <form #f="ngForm" (ngSubmit)="mySubmit(f)">...</form>


  <option value="">--Choose--</option>
- <option *ngFor="let opt in myOptions" [value]="opt.id">{{ opt.name }}</option>
================================ DONE:
- use redux to fetch data from the api with thunk-middleware
- add CRUD for a collection: 'Items'
- add links for CRUD
- @ViewChild