================================ TODO:

- bootstrap navbar with dropdown
- create a DataService as a base class!
- ElementRef
- toast notifications
- custom form validators
- add bootstrap alerts to give users feedback, or use toast notifications!
- use REDUX to remove item
- add state to localStorage
- use an ORM
- create models for data // as services?
- data associations
- use redis for caching
- add return types to functions, and arguments
- ngModelGroup // to combine fields into a nested object within the form?
- empty option: <option value="">--Choose--</option>
- <option *ngFor="let opt in myOptions" [value]="opt.id">{{ opt.name }}</option>
- async validators:
  display message while async function is pending in the form:  <div *ngIf="username.pending">Pending...</div> // .pending is NOT a custom function
- this.myForm.setErrors({myInvalidLogin: true}) // if the login didnt work, we can set errors on the form!
  <div *ngIf="myForm.errors" class="alert alert-danger">ERRORS!!!</div>   
- FormArray - so we can work a collection of js objects in a html form
- from POST, get the object back in the response?
- what if a user deletes an item, than another user tries to delete the same item? (since the data is cached in the client)
- catch http errors in the service, with 'rxjs/add/operator/catch' .catch  
  and 'rxjs/add/observable/throw' Observable.throw()  // Handling Bad Request Errors

================================ DONE:
- use redux to fetch data from the api with thunk-middleware
- add CRUD for a collection: 'Items'
- add links for CRUD
- @ViewChild
- delete items
- Guard subfolders
- custom pipes
- add CRUD forms
- custom directives // example of use case: massaging input on form
- jwt
- ngClass
- ngStyle
- FormBuilder (less code!)
- add api version: /api/v1/items
- modules
- complete the forms
- add form validation
- ng-template
